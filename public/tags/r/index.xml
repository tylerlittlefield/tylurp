<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on A Hugo website</title>
    <link>/tags/r/</link>
    <description>Recent content in R on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>drake: build workflows with R</title>
      <link>/2018/02/03/drake-build-workflows-with-r/</link>
      <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/03/drake-build-workflows-with-r/</guid>
      <description>Introduction drake is a really cool R package designed to manage workflows. It’s described as a computational engine for data science projects. The goal is to keep results up to date while also skipping anything that hasn’t changed. As a result, users can scale their work, skip redundant work, and reap the benefits of reproducibility.
 “What gets done stays done.”
 To no suprise, the package is part of the rOpenSci project, a community devoted to transparent research practices and reproducibility.</description>
    </item>
    
    <item>
      <title>Reproducibility</title>
      <link>/2018/01/30/reproducibility/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/30/reproducibility/</guid>
      <description>“Welcome to SO. In order to answer your question, please provide a minimal, complete, and verifiable example.”
 If you’ve ever asked a question on Stack Overflow (SO), you may recognize the quote above. This is because reproducibility is incredibly important when asking programming questions and it’s often overlooked by newcombers. To be brief, a great reproducible example should be:
Minimal – Provide the least amount of code needed to reproduce the problem.</description>
    </item>
    
  </channel>
</rss>